---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18-9-18 下午4:03
---

--Timer = require("lib.Timer")

local suit = require("lib.suit")
--local apply,cancel = false,false
--- @class SkillTree : GameObject

SkillTree = Object:extend()

function SkillTree:new()
    self.area = Area(self)
    self.tree = table.copy(tree)
    self.nodes = {}
    self.lines = {}
    --self.timer = Timer()
    self.main_canvas = love.graphics.newCanvas(sx * gw,sy * gh)
    for id,node in ipairs(self.tree) do
        for _,linked_node_id in ipairs(node.links or {}) do
            table.insert(self.tree[linked_node_id],id)
        end
    end
    for id, node in ipairs(self.tree) do table.insert(self.nodes, Node(id, node.x, node.y)) end
    for id, node in ipairs(self.tree) do
        if node.links then
            for _, linked_node_id in ipairs(node.links) do
                table.insert(self.lines, Line(id, linked_node_id))
            end
        end
    end
end

function SkillTree:update(dt)
    for _, node in ipairs(self.nodes) do
        node:update(dt)
    end
    for _, line in ipairs(self.lines) do
        line:update(dt)
    end


    if input:down("left_click") then
        local mx,my = camera:getMousePosition(sx,sy,0,0,sx * gw,sy * gh)
        local dx,dy = mx - self.previous_mx,my - self.previous_my
        camera:move(-dx,-dy)
    end
    self.previous_mx,self.previous_my = camera:getMousePosition(sx,sy,0,0,sx * gw,sy * gh)

    if input:pressed("zoom_in") then
        timer:tween(0.2,camera,{scale = camera.scale + 0.4},'in-out-cubic')
    end
    if input:pressed("zoom_out") then
        timer:tween(0.2,camera,{scale = camera.scale - 0.4},'in-out-cubic')
    end

    --- suit test
    suit.Label("技能点:" .. skill_points.left,gw - 100,0,100,20)
    suit.layout:reset(gw/2 - 40,gh - 40,20,20)
    apply = suit.Button("确定",suit.layout:row(50,30))
    cancel = suit.Button("取消", suit.layout:col())
    suit.Label("Apply",suit.layout:col())


    if apply.entered then
        print("enter")
    end
    if apply.hit then
        suit.Label("Apply",print("apply"))
        print("Apply")
    end


end


function SkillTree:draw()

    love.graphics.setCanvas(self.main_canvas)
    love.graphics.clear()
    camera:attach(0,0,gw*sx,gh*sy)
    if self.area then self.area:draw() end
    for _, line in ipairs(self.lines) do
        line:draw()
    end
    for _, node in ipairs(self.nodes) do
        node:draw()
    end


    local font = Fonts.unifont_16
    love.graphics.setFont(font)
    for _,node in ipairs(self.nodes) do
        if node.hot then
            local stats = tree[node.id].stats
            --- get max text width
            local max_text_width = 0
            for i=1,#stats,3 do
                if font:getWidth(stats[i]) > max_text_width then
                    max_text_width = font:getWidth(stats[i])
                end
            end
            --- draw rectangle
            local mx,my = camera:getMousePosition(sx,sy,0,0,sx * gw,sy * gh)
            --local mx,my = love.mouse.getPosition()
            mx,my = mx/sx,my/sy

            love.graphics.setColor(255,0,0,222)
            love.graphics.rectangle('fill',mx,my
            ,16 + max_text_width,font:getHeight() + #stats/3 * font:getHeight())
            --- draw text
            love.graphics.setColor(Color.default)
            for i = 1,#stats,3 do
                love.graphics.print(stats[i]
                ,math.floor(mx + 8),math.floor(my + font:getHeight()/2 + math.floor(i/3) * font:getHeight()))
            end
        end
    end
    camera:detach()
    love.graphics.setColor(255,255,255)
    love.graphics.setCanvas()
    --love.graphics.setBlendMode('alpha','premultiplied')
    love.graphics.draw(self.main_canvas,0,0)

    suit.draw()
end

function SkillTree:canNodeBeBought(id)
    for _,linked_node_id in ipairs(self.tree[id]) do
        if fn.any(bought_node_indexes,linked_node_id) then return true end
    end
end

function SkillTree:keypressed(key)
    p_print("key pressed")
    suit.keypressed(key)
end