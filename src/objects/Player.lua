---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by apple.
--- DateTime: 2018/8/28 下午8:28
---

---@class Player

Player = NewGameObject:extend()

function Player:new(area,x,y,opts)
    Player.super.new(self, area, x, y, opts)
    self.x ,self.y = x,y
    self.w,self.h = 12,12
    self.r = -math.pi/2
    self.rv = 1.66*math.pi
    self.v = 0
    self.base_max_v = 100
    self.max_v = base_max_v
    self.a = 100

    self.trail_color = Color.skill_point

    self.ship = "Fighter"
    self.polygons = {}

    self.timer:every(0.01,function ()
        self.area:addObject("TrailParticle",self.x - self.w*math.cos(self.r),
        self.y - self.h*math.sin(self.r), {parent = self,r = random(2,4), d = random(0.15,0.25),
                color = self.trail_color}
        )
    end)

    self.collider = self.area.world:newCircleCollider(self.x,self.y,self.w)
    --self.area.world:addCollisionClass("Player")
    --self.collider:setCollisionClass("Player")
    self.collider:setObject(self)
    self.attack_speed = 1
    self.timer:every(0.24/self.attack_speed,function () self:shot() end)
    self.timer:every(5,function () self:tick()end)
    input:bind('f4',function () self:die() end)
end

function Player:update(dt)
    Player.super.update(self,dt)
    self.max_v = self.base_max_v
    self.boosting = false

    if input:down("up") then
        self.boosting = true
        self.max_v = 1.5*self.base_max_v
    end
    if input:down("down") then
        self.boosting = true
        self.max_v = 0.5 * self.base_max_v
    end
    self.trail_color = Color.trail_color
    if self.boosting then self.trail_color = Color.boost end
    if input:down("left") then self.r = self.r - self.rv*dt end
    if input:down("right") then self.r = self.r + self.rv*dt end
    self.v = math.min(self.v + self.a * dt,self.max_v)
    --- 在windfield源码的备注中找到。。。。貌似用的 love2d physics的方法。
    self.collider:setLinearVelocity(self.v*math.cos(self.r),self.v*math.sin(self.r))
end

function Player:draw()
    love.graphics.circle('line',self.x,self.y,self.w)
    love.graphics.line(self.x,self.y,self.x + 2*self.w*math.cos(self.r),
            self.y + 2*self.w*math.sin(self.r))
end

function Player:shot()
    local d = 1.2*self.w
    self.area:addObject('ShootEffect',self.x + 1.5*d*math.cos(self.r),
            self.y + 1.5*d*math.sin(self.r),{player=self,d = d})
    --self.area:addObject('Projectile',self.x - 4*math.cos(self.r) + d*math.cos(self.r),
    --        self.y + d*math.sin(self.r),{r=self.r})
    self.area:addObject('Projectile',self.x + d*math.cos(self.r),
            self.y + d*math.sin(self.r),{r=self.r})
    --self.area:addObject('Projectile',self.x + 4*math.sin(self.r) + d*math.cos(self.r),
    --        self.y + d*math.sin(self.r),{r=self.r})
end

function Player:die()
    --self.dead = true
    for i = 1,love.math.random(8,12) do
        self.area:addObject('ExplodeParticle',self.x,self.y)
    end
    camera:shake(6,0.4,60)
    slow(0.5,1)
    flash(4)
    --camera:flash(1,{1,0,1,1})
    self.dead = true
end

function Player:tick()
    self.area:addObject("TickEffect",self.x,self.y,{parent = self})
end